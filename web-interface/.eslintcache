[{"C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\App.tsx":"1","C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\components\\AdminBox.tsx":"2","C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\components\\Company.tsx":"3","C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\components\\CompanyBox.tsx":"4","C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\components\\CompanyList.tsx":"5","C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\components\\Device.tsx":"6","C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\components\\DeviceList.tsx":"7","C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\components\\Login.tsx":"8","C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\components\\Menu.tsx":"9","C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\components\\ModalBox.tsx":"10","C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\components\\Profile.tsx":"11","C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\components\\SignUp.tsx":"12","C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\components\\SystemUser.tsx":"13","C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\components\\User.tsx":"14","C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\Frame.tsx":"15","C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\index.tsx":"16","C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\models\\index.ts":"17","C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\PasswordInput.tsx":"18","C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\queryTypes.ts":"19","C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\react-app-env.d.ts":"20","C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\service\\auth.requests.ts":"21","C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\service\\company.requests.ts":"22","C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\service\\device.request.ts":"23","C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\service\\http.service.ts":"24","C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\service\\user.requests.ts":"25","C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\serviceWorker.ts":"26","C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\setupTests.ts":"27","C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\types.ts":"28"},{"size":34856,"mtime":1611842575373,"results":"29","hashOfConfig":"30"},{"size":1042,"mtime":1601553181162,"results":"31","hashOfConfig":"30"},{"size":994,"mtime":1601553181162,"results":"32","hashOfConfig":"30"},{"size":2638,"mtime":1601553181163,"results":"33","hashOfConfig":"30"},{"size":740,"mtime":1601553181164,"results":"34","hashOfConfig":"30"},{"size":935,"mtime":1601553181164,"results":"35","hashOfConfig":"30"},{"size":3306,"mtime":1601553181165,"results":"36","hashOfConfig":"30"},{"size":2247,"mtime":1601553181166,"results":"37","hashOfConfig":"30"},{"size":3721,"mtime":1601553181166,"results":"38","hashOfConfig":"30"},{"size":1915,"mtime":1601553181167,"results":"39","hashOfConfig":"30"},{"size":1729,"mtime":1611842575378,"results":"40","hashOfConfig":"30"},{"size":2133,"mtime":1601553181168,"results":"41","hashOfConfig":"30"},{"size":1424,"mtime":1601553181170,"results":"42","hashOfConfig":"30"},{"size":3765,"mtime":1611842575379,"results":"43","hashOfConfig":"30"},{"size":3138,"mtime":1601553181160,"results":"44","hashOfConfig":"30"},{"size":538,"mtime":1601553181173,"results":"45","hashOfConfig":"30"},{"size":1306,"mtime":1601553181175,"results":"46","hashOfConfig":"30"},{"size":731,"mtime":1611842575375,"results":"47","hashOfConfig":"30"},{"size":5741,"mtime":1611842575381,"results":"48","hashOfConfig":"30"},{"size":40,"mtime":1601553181177,"results":"49","hashOfConfig":"30"},{"size":2339,"mtime":1601553181178,"results":"50","hashOfConfig":"30"},{"size":2240,"mtime":1601553181178,"results":"51","hashOfConfig":"30"},{"size":1461,"mtime":1611842575383,"results":"52","hashOfConfig":"30"},{"size":1877,"mtime":1601553181180,"results":"53","hashOfConfig":"30"},{"size":1760,"mtime":1611842575384,"results":"54","hashOfConfig":"30"},{"size":5213,"mtime":1601553181182,"results":"55","hashOfConfig":"30"},{"size":255,"mtime":1601553181182,"results":"56","hashOfConfig":"30"},{"size":625,"mtime":1601553181183,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"60"},"1xy43xg",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\App.tsx",["115"],"import React, { useReducer, useCallback, useEffect } from 'react';\nimport { IUser, IUserCompany } from './types';\nimport { Login } from './components/Login';\nimport { Profile } from './components/Profile';\nimport { Menu } from './components/Menu';\nimport { AdminBox } from './components/AdminBox';\nimport { SignUp } from './components/SignUp';\nimport { CompanyBox } from './components/CompanyBox';\nimport { Company } from './components/Company';\nimport { Device } from './components/Device';\nimport { User } from './components/User';\nimport { ModalBox } from './components/ModalBox';\nimport { SystemUser } from './components/SystemUser';\nimport { login, signup, logout, createCode, getCurrentUser } from './service/auth.requests';\nimport { getAllUsers, updateUser, getUserDevices, getUser } from './service/user.requests';\nimport { createDevice, deleteDevice, blockDevice } from './service/device.request';\nimport { getCompany, createCompany, updateCompany, getAllCompanies, getCompanyUsers } from './service/company.requests';\nimport { IDeviceInfo } from '../../common';\n\ntype AppState = 'LOGIN' | 'QUERY_LOGIN' | 'QUERY_LOGOUT' | 'SIGNUP' | 'SIGNUP_CODE' | 'QUERY_SIGNUP' | 'PROFILE' | 'SAVED_PROFILE'\n  | 'ADMIN' | 'CREATE_COMPANY' | 'UPDATE_COMPANY' | 'CREATE_USER' | 'ADD_USER_FROM_SYSTEM' | 'SHOW_CODE' | 'SHOW_CURRENT_CODE' | 'UPDATE_USER' | 'CREATE_DEVICENAME' | 'CREATE_CURRENT_DEVICENAME';\n\ninterface IState {\n  /**\n   * Состояние нашего приложения. В зависимости\n   * от него мы будем отрисовывать экран.\n   */\n  appState: AppState;\n  /**\n   * Наличие данных о пользователе будет для\n   * нас сигналом, что успешно прошла авторизация\n   * на сервере.\n   */\n  user?: IUser;\n\n  activationCode?: string;\n  company?: IUserCompany;\n  companies?: IUserCompany[];\n  devices?: IDeviceInfo[];\n  currentUser?: IUser;\n  currentCompanies?: IUserCompany[];\n  currentDevices?: IDeviceInfo[];\n  companyUsers?: IUser[];\n  allUsers?: IUser[];\n  errorMessage?: string;\n  isAdmin?: boolean;\n  needReReadCompanies?: boolean;\n  needReReadUsers?: boolean;\n  needReReadUserData?: boolean;\n};\n\ntype Action = { type: 'SET_STATE', appState: AppState }\n  | { type: 'SET_USER', user?: IUser, needReReadCompanies?: boolean, needReReadUserData?: boolean }\n  | { type: 'UPDATE_USER', user: Partial<IUser> }\n  | { type: 'SET_ACTIVATION_CODE', code?: string }\n  | { type: 'SET_COMPANY_USERS', companyUsers?: IUser[] }\n  | { type: 'SET_ALL_USERS', allUsers?: IUser[] }\n  | { type: 'CREATE_COMPANY', company: IUserCompany }\n  | { type: 'SET_COMPANY', company?: IUserCompany, needReReadUsers?: boolean }\n  | { type: 'SET_COMPANIES', companies?: IUserCompany[] }\n  | { type: 'SET_CURRENT_COMPANIES', companies?: IUserCompany[] }\n  | { type: 'SET_CURRENT_USER', user?: IUser }\n  | { type: 'UPDATE_CURRENT_USER', user: Partial<IUser> }\n  | { type: 'SET_IS_ADMIN', isAdmin?: boolean }\n  | { type: 'UPDATE_COMPANY', companyId: string, companyName: string }\n  | { type: 'SET_DEVICES', devices?: IDeviceInfo[] }\n  | { type: 'SET_CURRENT_DEVICES', devices?: IDeviceInfo[] }\n  | { type: 'UPDATE_CURRENT_DEVICE', device: IDeviceInfo }\n  | { type: 'DELETE_CURRENT_DEVICE', uId: string }\n  | { type: 'SET_ERROR', errorMessage?: string };\n\n/*\n\n    Когда нам надо с сервера получать список организаций?\n\n    1. Сразу после успешного логина. Получаем список и храним его в стэйте App.\n       Используем этот список при отрисовке на экране и прочих действиях.\n\n    2. При переходе на страницу просмотр профиля мы перечитываем список организаций\n       на случай, если он поменялся где-то еще (например, с другого компьютера).\n\n    3. При переходе на страницу Администратор (там есть раздел мои организации).\n\n    Все вышеперечисленные случаи обрабатываются в редусере и устанавливается\n    соответстувующий флаг needReReadCompanies.\n\n*/\n\n/*\n  Получить данные по пользователю надо:\n  1. При открытии приложения, если раньше был совершен вход\n  2. Если был совершен выход (user === undefined) и пользователь логинится\n*/\n\nconst reducer = (state: IState, action: Action): IState => {\n  switch (action.type) {\n    case 'SET_STATE': {\n      return {\n        ...state,\n        appState: action.appState,\n        //  needReReadCompanies: state.needReReadCompanies || (state.appState !== action.appState && (action.appState === 'LOGIN' ))\n      }\n    }\n    case 'SET_ERROR': {\n      const { errorMessage } = action;\n      return {\n        ...state,\n        errorMessage\n      }\n    }\n    case 'SET_USER': {\n      const { user, needReReadCompanies, needReReadUserData } = action;\n      return {\n        ...state,\n        user,\n        needReReadCompanies,\n        needReReadUserData,\n        currentUser: undefined\n      }\n    }\n    case 'UPDATE_USER': {\n      const { user } = action;\n      return {\n        ...state,\n        user: state.user ? { ...state.user, ... user } : undefined,\n      }\n    }\n    case 'SET_ACTIVATION_CODE': {\n      return {\n        ...state,\n        activationCode: action.code\n      }\n    }\n    case 'SET_COMPANY_USERS': {\n      const { companyUsers } = action;\n      return {\n        ...state,\n        companyUsers\n      }\n    }\n    case 'SET_ALL_USERS': {\n      const { allUsers } = action;\n      return {\n        ...state,\n        allUsers\n      }\n    }\n    case 'CREATE_COMPANY': {\n      const { company } = action;\n      return {\n        ...state,\n        companies: state.companies ? [...state.companies, company] : [company]\n      }\n    }\n    case 'UPDATE_COMPANY': {\n      const { companyId, companyName } = action;\n      return {\n        ...state,\n        companies: state.companies?.map(comp => comp.companyId === companyId ? { ...comp, companyName } : comp)\n      }\n    }\n    case 'SET_COMPANIES': {\n      /**\n       * При загрузке списка компаний, мы проверяем есть ли среди них\n       * хотя бы одна, для которой текущий пользователь является администратором\n       * и выставляем соответствующий флаг в стэйте.\n       */\n\n      const { companies } = action;\n      const isAdmin = companies?.some(c => c.userRole === 'Admin');\n      return {\n        ...state,\n        companies,\n        needReReadCompanies: false,\n        isAdmin\n      }\n    }\n    case 'SET_CURRENT_COMPANIES': {\n      const { companies } = action;\n      return {\n        ...state,\n        currentCompanies: companies\n      }\n    }\n    case 'SET_COMPANY': {\n      const { company, needReReadUsers } = action;\n      return {\n        ...state,\n        company,\n        needReReadUsers\n      }\n    }\n    case 'SET_CURRENT_USER': {\n      const { user } = action;\n      return {\n        ...state,\n        currentUser: user\n      }\n    }\n    case 'UPDATE_CURRENT_USER': {\n      const { user } = action;\n      return {\n        ...state,\n        currentUser: state.currentUser ? { ...state.currentUser, ...user} : undefined,\n      }\n    }\n\n    case 'SET_IS_ADMIN': {\n      const { isAdmin } = action;\n      return {\n        ...state,\n        isAdmin\n      }\n    }\n\n    case 'SET_DEVICES': {\n      const { devices } = action;\n      return {\n        ...state,\n        devices\n      }\n    }\n\n    case 'SET_CURRENT_DEVICES': {\n      const { devices } = action;\n      return {\n        ...state,\n        currentDevices: devices\n      }\n    }\n\n    case 'UPDATE_CURRENT_DEVICE': {\n      const { device } = action;\n      const { currentDevices } = state;\n      const idx = currentDevices?.findIndex(item => item.deviceId === device.deviceId);\n      if (currentDevices && idx !== undefined && idx > -1) {\n        return {\n          ...state,\n          currentDevices: [...currentDevices?.slice(0, idx), device, ...currentDevices?.slice(idx + 1)]\n        }\n      } else {\n        return state;\n      }\n    }\n\n    case 'DELETE_CURRENT_DEVICE': {\n      const { uId } = action;\n      const { currentDevices } = state;\n      if (currentDevices) {\n        return {\n          ...state,\n          currentDevices: currentDevices.filter(item => item.deviceId !== uId)\n        }\n      } else {\n        return state;\n      }\n    }\n\n    default:\n      return state;\n  }\n};\n\nconst App: React.FC = () => {\n  const [{ appState, user, activationCode, companies, currentCompanies, company, companyUsers, allUsers, errorMessage, isAdmin, currentUser,\n    devices, currentDevices, needReReadCompanies, needReReadUsers, needReReadUserData }, dispatch] = useReducer(reducer, {\n      appState: 'LOGIN',\n      needReReadUserData: true\n\n    });\n\n  console.log('appState: ' + appState);\n\n  const handleSetError = useCallback((errorMessage?: string) => {\n    dispatch({ type: 'SET_ERROR', errorMessage })\n  }, [dispatch]);\n\n  const handleSetAppState = useCallback((appState: AppState) => {\n    dispatch({ type: 'SET_STATE', appState })\n  }, [dispatch]);\n\n  const handleLogin = (userName: string, password: string) => {\n    console.log('handleLogin');\n    login(userName, password)\n      .then(data => {\n        if (data.type === 'ERROR') {\n          dispatch({ type: 'SET_ERROR', errorMessage: data.message });\n        }\n        else if (data.type === 'LOGIN') {\n          dispatch({ type: 'SET_USER', needReReadUserData: true });\n        }\n      })\n      .catch(error => dispatch({ type: 'SET_ERROR', errorMessage: JSON.stringify(error) }));\n  };\n\n  const handleSignUp = (userName: string, password: string) => {\n    signup(userName, password)\n      .then(data => {\n        if (data.type === 'ERROR') {\n          dispatch({ type: 'SET_ERROR', errorMessage: data.message });\n        }\n        else if (data.type === 'SIGNUP') {\n          //dispatch({ type: 'SET_USER', user: data.user });\n          dispatch({ type: 'SET_STATE', appState: 'LOGIN' });\n        }\n      })\n      .catch(error => dispatch({ type: 'SET_ERROR', errorMessage: JSON.stringify(error) }));\n  };\n\n  const handleLogOut = () => {\n    logout()\n      .then(data => {\n        if (data.type === 'ERROR') {\n          dispatch({ type: 'SET_ERROR', errorMessage: data.message });\n        }\n        else if (data.type === 'LOGOUT') {\n          dispatch({ type: 'SET_COMPANY', company: undefined });\n          dispatch({ type: 'SET_USER', user: undefined });\n          dispatch({ type: 'SET_IS_ADMIN', isAdmin: undefined });\n          dispatch({ type: 'SET_STATE', appState: 'LOGIN' });\n        }\n      })\n      .catch(error => dispatch({ type: 'SET_ERROR', errorMessage: JSON.stringify(error) }));\n  };\n\n  const handleGetAllUsers = () => {\n    getAllUsers()\n      .then(data => {\n        if (data.type === 'ERROR') {\n          dispatch({ type: 'SET_ERROR', errorMessage: data.message });\n        }\n        else if (data.type === 'ALL_USERS') {\n          dispatch({ type: 'SET_ALL_USERS', allUsers: data.users.filter(u => u.id !== user?.id) });\n          dispatch({ type: 'SET_STATE', appState: 'ADD_USER_FROM_SYSTEM' })\n        }\n      })\n      .catch(error => dispatch({ type: 'SET_ERROR', errorMessage: JSON.stringify(error) }));\n  };\n\n  const handleCreateCode = (deviceId: string) => {\n    if (deviceId) {\n      createCode(deviceId)\n        .then(data => {\n          if (data.type === 'ERROR') {\n            dispatch({ type: 'SET_ERROR', errorMessage: data.message });\n          }\n          else if (data.type === 'USER_CODE') {\n            dispatch({ type: 'SET_ACTIVATION_CODE', code: data.code });\n            dispatch({ type: 'SET_DEVICES', devices: devices?.map(d => d.id === deviceId ? { ...d, state: d.state } : { ...d }) });\n            dispatch({ type: 'SET_STATE', appState: 'SHOW_CODE' })\n          }\n        })\n        .catch(error => dispatch({ type: 'SET_ERROR', errorMessage: JSON.stringify(error) }));\n    }\n  };\n\n  const handleCreateCurrentCode = (deviceId: string) => {\n    if (deviceId) {\n      createCode(deviceId)\n        .then(data => {\n          if (data.type === 'ERROR') {\n            dispatch({ type: 'SET_ERROR', errorMessage: data.message });\n          }\n          else if (data.type === 'USER_CODE') {\n            dispatch({ type: 'SET_ACTIVATION_CODE', code: data.code });\n            dispatch({ type: 'SET_CURRENT_DEVICES', devices: currentDevices?.map(d => d.id === deviceId ? { ...d, state: 'NON-ACTIVATED' } : { ...d }) });\n            dispatch({ type: 'SET_STATE', appState: 'SHOW_CURRENT_CODE' });\n          }\n        })\n        .catch(error => dispatch({ type: 'SET_ERROR', errorMessage: JSON.stringify(error) }));\n    }\n  };\n\n  const handleCreateDevice = (title: string) => {\n    console.log('handleCreateDevice.user: ', user);\n    if (user?.id) {\n      createDevice(title, user.id)\n        .then(data => {\n          if (data.type === 'ERROR') {\n            dispatch({ type: 'SET_ERROR', errorMessage: data.message });\n          }\n          else if (data.type === 'CREATE_DEVICENAME') {\n            dispatch({\n              type: 'SET_DEVICES',\n              devices: devices\n                ? [...devices, { id: data.uid, deviceId: '', deviceName: title, userId: user.id ?? '', userName: user.userName, state: 'NEW' }]\n                : [{ id: data.uid, deviceId: '', deviceName: title, userId: user.id ?? '', userName: user.userName, state: 'NEW' }]\n            });\n            dispatch({ type: 'SET_STATE', appState: 'UPDATE_USER' })\n          }\n        })\n        .catch(error => dispatch({ type: 'SET_ERROR', errorMessage: JSON.stringify(error) }));\n    }\n  };\n\n  const handleCreateCurrentDevice = (title: string) => {\n    console.log('handleCreateCurrentDevice.currentUser: ', currentUser);\n    if (currentUser?.id) {\n      createDevice(title, currentUser.id)\n        .then(data => {\n          if (data.type === 'ERROR') {\n            dispatch({ type: 'SET_ERROR', errorMessage: data.message });\n          }\n          else if (data.type === 'CREATE_DEVICENAME') {\n            dispatch({\n              type: 'SET_CURRENT_DEVICES',\n              devices: currentDevices\n                ? [\n                  ...currentDevices,\n                  { id: data.uid, deviceId: '', deviceName: title, userId: currentUser.id ?? '', userName: currentUser.userName, state: 'NEW' }\n                ]\n                : [{ id: data.uid, deviceId: '', deviceName: title, userId: currentUser.id ?? '', userName: currentUser.userName, state: 'NEW' }]\n            });\n            dispatch({ type: 'SET_STATE', appState: 'UPDATE_USER' })\n          }\n        })\n        .catch(error => dispatch({ type: 'SET_ERROR', errorMessage: JSON.stringify(error) }));\n    }\n  };\n\n  const handleSelectCompany = (companyId: string) => {\n    getCompany(companyId)\n      .then(data => {\n        if (data.type === 'ERROR') {\n          dispatch({ type: 'SET_ERROR', errorMessage: data.message });\n        }\n        else if (data.type === 'USER_COMPANY') {\n          dispatch({ type: 'SET_COMPANY', company: data.company, needReReadUsers: true });\n          dispatch({ type: 'SET_STATE', appState: 'UPDATE_COMPANY' });\n        }\n      })\n      .catch(error => dispatch({ type: 'SET_ERROR', errorMessage: JSON.stringify(error) }));\n  };\n\n  const handleCreateCompany = (companyName: string) => {\n    createCompany(companyName)\n      .then(data => {\n        if (data.type === 'ERROR') {\n          dispatch({ type: 'SET_ERROR', errorMessage: data.message });\n        }\n        else if (data.type === 'NEW_COMPANY') {\n          const newCompany: IUserCompany = { companyName, companyId: companyName, userRole: 'Admin' }\n          dispatch({ type: 'SET_COMPANY', company: newCompany });\n          dispatch({ type: 'SET_COMPANIES', companies: (companies ? [...companies, newCompany] : [newCompany]).filter(c => c.userRole === 'Admin') });\n          dispatch({ type: 'SET_IS_ADMIN', isAdmin: true });\n          dispatch({ type: 'SET_STATE', appState: 'ADMIN' });\n        }\n      })\n      .catch(error => dispatch({ type: 'SET_ERROR', errorMessage: JSON.stringify(error) }));\n  };\n\n  const handleCreateUser = (new_user: IUser) => {\n    if (company?.companyId && user?.id) {\n      signup(new_user.userName, new_user.password ?? '', company.companyId, user.id)\n        .then(data => {\n          if (data.type === 'ERROR') {\n            dispatch({ type: 'SET_ERROR', errorMessage: data.message });\n          }\n          else if (data.type === 'SIGNUP') {\n            //dispatch({ type: 'SET_CURRENT_USER', user: data.user });\n            dispatch({ type: 'SET_COMPANY_USERS', companyUsers: companyUsers ? [...companyUsers, { ...new_user, id: data.userId }] : [{ ...new_user, id: data.userId }] });\n            dispatch({ type: 'SET_CURRENT_DEVICES', devices: [] });\n            dispatch({ type: 'SET_COMPANIES', companies: companies?.filter(c => c.companyId === company.companyId) });\n            dispatch({ type: 'SET_STATE', appState: 'UPDATE_COMPANY' });\n          }\n        })\n        .catch(error => dispatch({ type: 'SET_ERROR', errorMessage: JSON.stringify(error) }));\n    }\n  };\n\n  const handleAddSystemUser = (userId: string) => {\n    const systemUuser = allUsers?.find(item => item.id === userId);\n    if (company?.companyId && systemUuser) {\n      updateUser({ ...systemUuser, companies: systemUuser.companies ? [...systemUuser.companies, company?.companyId] : [company?.companyId] })\n        .then(data => {\n          if (data.type === 'ERROR') {\n            dispatch({ type: 'SET_ERROR', errorMessage: data.message });\n          }\n          else if (data.type === 'UPDATE_USER') {\n            const addedUser = allUsers?.find(u => u.id === userId);\n            if (addedUser) {\n              dispatch({ type: 'SET_CURRENT_USER', user: { ...addedUser } });\n              dispatch({ type: 'SET_COMPANY_USERS', companyUsers: companyUsers ? [...companyUsers, addedUser] : [addedUser] });\n              dispatch({ type: 'SET_STATE', appState: 'UPDATE_COMPANY' });\n            }\n          }\n        })\n        .catch(error => dispatch({ type: 'SET_ERROR', errorMessage: JSON.stringify(error) }));\n    }\n  };\n\n  const handleUpdateCompany = (companyId: string, companyName: string) => {\n    updateCompany(companyName, companyId)\n      .then(data => {\n        if (data.type === 'ERROR') {\n          dispatch({ type: 'SET_ERROR', errorMessage: data.message });\n        }\n        else if (data.type === 'UPDATE_COMPANY') {\n          dispatch({ type: 'UPDATE_COMPANY', companyId, companyName });\n          dispatch({ type: 'SET_STATE', appState: 'ADMIN' });\n        }\n      })\n      .catch(error => dispatch({ type: 'SET_ERROR', errorMessage: JSON.stringify(error) }));\n  };\n\n  const handleGetCompanies = (companies: string[], userId: string, type: 'SET_COMPANIES' | 'SET_CURRENT_COMPANIES') => {\n    getAllCompanies()\n      .then(data => {\n        if (data.type === 'ERROR') {\n          dispatch({ type: 'SET_ERROR', errorMessage: data.message });\n        }\n        else if (data.type === 'USER_COMPANIES') {\n          const getCompanies = data.companies\n            .filter(item => companies.some(company => company === item.id))\n            .map(item => { return { companyId: item.id, companyName: item.title, userRole: item.admin === userId ? 'Admin' : undefined } as IUserCompany });\n          dispatch({ type: type, companies: getCompanies });\n        }\n      })\n      .catch(error => dispatch({ type: 'SET_ERROR', errorMessage: JSON.stringify(error) }));\n  };\n\n  const handleGetUserDevices = (userId: string, type: 'SET_DEVICES' | 'SET_CURRENT_DEVICES') => {\n    getUserDevices(userId)\n      .then(data => {\n        if (data.type === 'ERROR') {\n          dispatch({ type: 'SET_ERROR', errorMessage: data.message });\n        }\n        else if (data.type === 'USER_DEVICES') {\n          dispatch({ type, devices: data.devices })\n        }\n      })\n      .catch(error => dispatch({ type: 'SET_ERROR', errorMessage: JSON.stringify(error) }));\n  };\n\n  const handleUpdateUser = (editUser: Partial<IUser>, type: 'UPDATE_USER' | 'UPDATE_CURRENT_USER') => {\n    updateUser(editUser)\n      .then(data => {\n        if (data.type === 'ERROR') {\n          dispatch({ type: 'SET_ERROR', errorMessage: data.message });\n        }\n        else if (data.type === 'UPDATE_USER') {\n          dispatch({ type, user: editUser });\n          dispatch({ type: 'SET_STATE', appState: 'SAVED_PROFILE' });\n        }\n      })\n      .catch(error => dispatch({ type: 'SET_ERROR', errorMessage: JSON.stringify(error) }));\n  };\n\n\n  const handleRemoveCompanyUsers = (userIds: string[]) => {\n    if (company?.companyId) {\n      const uIds = userIds.filter(u => u !== user?.id);\n      uIds.forEach(uId => {\n        getUser(uId)\n          .then(data => {\n            if (data.type === 'ERROR') {\n              dispatch({ type: 'SET_ERROR', errorMessage: data.message });\n            }\n            else if (data.type === 'GET_USER') {\n              if (data.user && data.user.companies) {\n                updateUser({ ...data.user, companies: data.user.companies.filter((item) => item !== company?.companyId) })\n                  .then(data => {\n                    if (data.type === 'ERROR') {\n                      dispatch({ type: 'SET_ERROR', errorMessage: data.message });\n                    }\n                    else if (data.type === 'UPDATE_USER') {\n                      dispatch({ type: 'SET_USER', user });\n                      dispatch({ type: 'SET_STATE', appState: 'SAVED_PROFILE' });\n                    }\n                  })\n                  .catch(error => dispatch({ type: 'SET_ERROR', errorMessage: JSON.stringify(error) }));\n              }\n            }\n          })\n          .catch(error => dispatch({ type: 'SET_ERROR', errorMessage: JSON.stringify(error) }));\n      });\n    }\n  };\n\n  const handleRemoveDevices = async (uIds: string[]) => {\n    uIds.forEach(uId => {\n      if (user && user.id) {\n        deleteDevice(uId)\n        .then( data => {\n          if (data.type === 'ERROR') {\n            dispatch({ type: 'SET_ERROR', errorMessage: data.message });\n          }\n          else if (data.type === 'REMOVE_DEVICES') {\n            const newDevices = devices?.filter(c => uId !== c.id);\n            dispatch({ type: 'SET_DEVICES', devices: newDevices});\n          }\n        })\n        .catch( error => dispatch({ type: 'SET_ERROR', errorMessage: JSON.stringify(error) }) );\n      }\n    });\n  };\n\n  const handleBlockDevices = (uIds: string[], isUnBlock: boolean) => {\n    uIds.forEach(uId => {\n      if (user && user.id) {\n        const device = devices?.find(dev => dev.id === uId);\n        if (!device) {\n          dispatch({ type: 'SET_ERROR', errorMessage: 'Устройство не найдено.' });\n          return;\n        }\n        blockDevice({id: device.id, uid: device.deviceId, state: !isUnBlock ? 'BLOCKED' : 'ACTIVE'})\n        .then( data => {\n          if (data.type === 'ERROR') {\n            dispatch({ type: 'SET_ERROR', errorMessage: data.message });\n          }\n          else if (data.type === 'BLOCK_DEVICES') {\n            const idx = devices?.findIndex(dev => dev.deviceId === uId);\n            if (devices && idx !== undefined) {\n              const newDevices: IDeviceInfo[] =  devices.map(dev => dev.id === device.id ? {...dev, state: isUnBlock ? 'ACTIVE' : 'BLOCKED'} : dev);\n                dispatch({ type: 'SET_DEVICES', devices: newDevices });\n              }\n            }\n          })\n          .catch(error => dispatch({ type: 'SET_ERROR', errorMessage: JSON.stringify(error) }));\n      }\n    });\n  };\n\n  const handleRemoveCurrentDevices = (uIds: string[]) => {\n    uIds.forEach(uId => {\n      if (currentUser?.id) {\n        deleteDevice(uId)\n        .then( data => {\n          if (data.type === 'ERROR') {\n            dispatch({ type: 'SET_ERROR', errorMessage: data.message });\n          }\n          else if (data.type === 'REMOVE_DEVICES') {\n            dispatch({ type: 'DELETE_CURRENT_DEVICE', uId});\n            const newDevices = currentDevices?.filter(c => uId !== c.id);\n            dispatch({ type: 'SET_CURRENT_DEVICES', devices: newDevices});\n          }\n        })\n        .catch( error => dispatch({ type: 'SET_ERROR', errorMessage: JSON.stringify(error) }) );\n      }\n    });\n  };\n\n  const handleBlockCurrentDevices = (uIds: string[], isUnBlock: boolean) => {\n    uIds.forEach(uId => {\n      if (currentUser?.id) {\n        const device = currentDevices?.find(dev => dev.id === uId);\n        if (!device) {\n          dispatch({ type: 'SET_ERROR', errorMessage: 'Устройство не найдено.' });\n          return;\n        }\n        blockDevice({id: device.id, uid: device.deviceId, state: isUnBlock ? 'ACTIVE' : 'BLOCKED'})\n        .then( data => {\n          if (data.type === 'ERROR') {\n            dispatch({ type: 'SET_ERROR', errorMessage: data.message });\n          }\n          else if (data.type === 'BLOCK_DEVICES') {\n            const idx = currentDevices?.findIndex(dev => dev.deviceId === uId);\n            if (currentDevices && idx !== undefined) {\n              const newDevices: IDeviceInfo[] = currentDevices.map(dev => dev.id === device.id ? {...dev, state: isUnBlock ? 'ACTIVE' : 'BLOCKED'} : dev);\n                dispatch({ type: 'SET_CURRENT_DEVICES', devices: newDevices });\n              }\n            }\n          })\n          .catch(error => dispatch({ type: 'SET_ERROR', errorMessage: JSON.stringify(error) }));\n      }\n    })\n  };\n\n  const handleGetCurrentUser = (userId: string) => {\n    dispatch({ type: 'SET_CURRENT_USER', user: companyUsers?.find(u => u.id === userId) });\n    dispatch({ type: 'SET_STATE', appState: 'UPDATE_USER' });\n  };\n\n  useEffect(() => {\n    if (needReReadCompanies && user?.id) {\n      console.log('useEffect: needReReadCompanies');\n      handleGetCompanies(user.companies ?? [], user.id, 'SET_COMPANIES');\n      handleGetUserDevices(user.id, 'SET_DEVICES');\n    }\n  }, [needReReadCompanies, user]);\n\n  useEffect(() => {\n    if (currentUser?.id) {\n      console.log('useEffect: currentUser');\n      handleGetCompanies(currentUser.companies ?? [], currentUser.id, 'SET_CURRENT_COMPANIES');\n      handleGetUserDevices(currentUser.id, 'SET_CURRENT_DEVICES');\n    }\n  }, [currentUser]);\n\n  useEffect(() => {\n    console.log('useEffect: isAdmin = ' + isAdmin);\n    if (isAdmin !== undefined) {\n      dispatch({ type: 'SET_STATE', appState: isAdmin ? 'ADMIN' : 'PROFILE' });\n    }\n  }, [isAdmin]);\n\n  useEffect(() => {\n    if (needReReadUserData) {\n      console.log('useEffect: needReReadUserData');\n      getCurrentUser()\n        .then(data => {\n          if (data.type === 'ERROR') {\n            dispatch({ type: 'SET_ERROR', errorMessage: data.message });\n          }\n          else if (data.type === 'USER') {\n            dispatch({ type: 'SET_USER', user: data.user, needReReadCompanies: true });\n          } else if (data.type === 'USER_NOT_AUTHENTICATED') {\n            dispatch({ type: 'SET_STATE', appState: 'LOGIN' });\n            dispatch({ type: 'SET_USER' });\n          }\n        })\n        .catch(error => dispatch({ type: 'SET_ERROR', errorMessage: JSON.stringify(error) }));\n    }\n  }, [needReReadUserData])\n\n\n  /**\n   * Получить пользователей компании надо, когда\n   * 1. Выбираем компанию для просмотра\\редактирования\n   */\n  useEffect(() => {\n    if (company?.companyId && needReReadUsers && user) {\n      console.log('useEffect: company');\n      getCompanyUsers(company.companyId)\n        .then(data => {\n          if (data.type === 'ERROR') {\n            dispatch({ type: 'SET_ERROR', errorMessage: data.message });\n          }\n          else if (data.type === 'COMPANY_USERS') {\n            dispatch({ type: 'SET_COMPANY_USERS', companyUsers: data.users.map(u => u.id === user?.id ? { ...u, isAdmin: true } : u) });\n          }\n        })\n        .catch(error => dispatch({ type: 'SET_ERROR', errorMessage: JSON.stringify(error) }));\n    } else {\n      dispatch({ type: 'SET_COMPANY_USERS', companyUsers: undefined });\n    }\n  }, [company, needReReadUsers, user])\n\n  return (\n    appState === 'LOGIN' || appState === 'QUERY_LOGIN'\n      ?\n      <Login\n        userName={user?.userName}\n        password={user?.password}\n        querying={appState === 'QUERY_LOGIN'}\n        errorMessage={errorMessage}\n        onLogin={handleLogin}\n        onSetSignUp={() => handleSetAppState('SIGNUP')}\n        onClearError={handleSetError}\n      />\n      :\n      appState === 'SIGNUP' || appState === 'QUERY_SIGNUP'\n        ?\n        <SignUp\n          querying={appState === 'QUERY_SIGNUP'}\n          errorMessage={errorMessage}\n          onSignUp={handleSignUp}\n          onClearError={handleSetError}\n        />\n        : user\n          ?\n          <div>\n            <Menu\n              querying={appState === 'QUERY_LOGOUT'}\n              errorMessage={errorMessage}\n              onEditProfile={() => handleSetAppState('PROFILE')}\n              onLogOut={handleLogOut}\n              onClearError={handleSetError}\n              onCreateCompany={() => handleSetAppState('CREATE_COMPANY')}\n              onGetCompanies={() => handleSetAppState('ADMIN')}\n              onCreateUser={appState === 'UPDATE_COMPANY' ? () => handleSetAppState('CREATE_USER') : undefined}\n              onAddUserFromSystem={appState === 'UPDATE_COMPANY' ? handleGetAllUsers : undefined}\n              onCreateDevice={\n                appState === 'UPDATE_USER' || appState === 'SAVED_PROFILE'\n                  ? () => handleSetAppState('CREATE_CURRENT_DEVICENAME')\n                  : appState === 'PROFILE' && isAdmin\n                    ? () => handleSetAppState('CREATE_DEVICENAME')\n                    : undefined}\n              isAdmin={isAdmin}\n            />\n            {appState === 'ADMIN' && companies\n              ?\n              <AdminBox\n                companies={companies?.filter(comp => comp.userRole)}\n                onClearError={handleSetError}\n                onSelectCompany={handleSelectCompany}\n              />\n              : appState === 'CREATE_DEVICENAME' || appState === 'CREATE_CURRENT_DEVICENAME'\n                ?\n                <Device\n                  onUpdateDevice={(title: string) => appState === 'CREATE_DEVICENAME' ? handleCreateDevice(title) : handleCreateCurrentDevice(title)}\n                  onClearError={handleSetError}\n                />\n                : appState === 'CREATE_COMPANY'\n                  ?\n                  <Company\n                    onUpdateCompany={handleCreateCompany}\n                    onClearError={handleSetError}\n                  />\n                  : appState === 'CREATE_USER' && user?.id\n                    ?\n                    <User\n                      user={{ userName: '', creatorId: user.id }}\n                      mode={'creating'}\n                      onCreateProfile={handleCreateUser}\n                      onClearError={handleSetError}\n                      isCanEditUser={true}\n                    />\n                    : appState === 'ADD_USER_FROM_SYSTEM'\n                      ?\n                      <SystemUser\n                        allUsers={allUsers}\n                        companyUsers={companyUsers}\n                        onAddUser={handleAddSystemUser}\n                        onClearError={handleSetError}\n                      />\n                      : appState === 'UPDATE_COMPANY' && company\n                        ?\n                        <CompanyBox\n                          companyName={company.companyName}\n                          companyId={company.companyId}\n                          users={companyUsers}\n                          allUsers={allUsers}\n                          onUpdateCompany={handleUpdateCompany}\n                          onClearError={handleSetError}\n                          onSelectUser={handleGetCurrentUser}\n                          onRemoveUsersFromCompany={handleRemoveCompanyUsers}\n                        />\n                        : (appState === 'UPDATE_USER' || appState === 'SAVED_PROFILE') && currentUser\n                          ?\n                          <Profile\n                            user={currentUser}\n                            companies={currentCompanies}\n                            devices={currentDevices}\n                            onClearEditOK={() => handleSetAppState('PROFILE')}\n                            onEditProfile={(user: Partial<IUser>) => handleUpdateUser(user, 'UPDATE_CURRENT_USER')}\n                            onClearError={handleSetError}\n                            isCanEditUser={currentUser.creatorId === user.id}\n                            isCanEditDevices={isAdmin}\n                            onRemoveDevices={handleRemoveCurrentDevices}\n                            onBlockDevices={handleBlockCurrentDevices}\n                            onGetCode={handleCreateCurrentCode}\n                          />\n                          : (appState === 'SHOW_CODE' || appState === 'SHOW_CURRENT_CODE') && activationCode\n                            ?\n                            <ModalBox\n                              title={'Код для активации устройства'}\n                              text={activationCode}\n                              onClose={() => {\n                                dispatch({ type: 'SET_ACTIVATION_CODE' });\n                                handleSetAppState('UPDATE_USER');\n                              }}\n                            />\n                            :\n                            <Profile\n                              user={user}\n                              companies={companies}\n                              devices={devices}\n                              isEditOK={appState === 'SAVED_PROFILE'}\n                              onClearEditOK={() => handleSetAppState('PROFILE')}\n                              onEditProfile={(user: Partial<IUser>) => handleUpdateUser(user, 'UPDATE_USER')}\n                              onClearError={handleSetError}\n                              isCanEditUser={true}\n                              isCanEditDevices={isAdmin}\n                              onRemoveDevices={handleRemoveDevices}\n                              onBlockDevices={handleBlockDevices}\n                              onGetCode={handleCreateCode}\n                            />\n            }\n\n          </div>\n          :\n          <div>Тест</div>\n  );\n};\n\nexport default App;\n","C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\components\\AdminBox.tsx",[],"C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\components\\Company.tsx",[],"C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\components\\CompanyBox.tsx",[],"C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\components\\CompanyList.tsx",[],"C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\components\\Device.tsx",[],"C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\components\\DeviceList.tsx",[],"C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\components\\Login.tsx",[],"C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\components\\Menu.tsx",[],"C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\components\\ModalBox.tsx",[],"C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\components\\Profile.tsx",[],"C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\components\\SignUp.tsx",[],"C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\components\\SystemUser.tsx",[],"C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\components\\User.tsx",[],"C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\Frame.tsx",[],"C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\index.tsx",[],"C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\models\\index.ts",[],"C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\PasswordInput.tsx",[],"C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\queryTypes.ts",[],"C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\react-app-env.d.ts",[],"C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\service\\auth.requests.ts",[],"C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\service\\company.requests.ts",[],"C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\service\\device.request.ts",[],"C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\service\\http.service.ts",[],"C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\service\\user.requests.ts",[],"C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\serviceWorker.ts",[],"C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\setupTests.ts",[],"C:\\_Work\\Git\\golden\\_ng\\gdmn-webservice\\web-interface\\src\\types.ts",[],{"ruleId":"116","severity":1,"message":"117","line":125,"column":48,"nodeType":"118","messageId":"119","endLine":125,"endColumn":49,"fix":"120"},"rest-spread-spacing","Unexpected whitespace after spread property operator.","SpreadElement","unexpectedWhitespace",{"range":"121","text":"122"},[4816,4817],""]